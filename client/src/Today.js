// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var CssJs = require("bs-css-emotion/src/CssJs.js");
var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var StringToColor = require("string-to-color");

function str(s) {
  return s;
}

var container = CssJs.style([
      CssJs.display("flex"),
      CssJs.overflow("hidden"),
      CssJs.lineHeight(CssJs.px(0)),
      CssJs.fontSize(CssJs.px(12)),
      CssJs.backgroundColor(CssJs.hex("e9ecef")),
      CssJs.borderRadius(CssJs.px(4)),
      CssJs.flex3(1, 1, CssJs.auto),
      CssJs.alignSelf("center"),
      CssJs.marginLeft(CssJs.px(6)),
      CssJs.height(CssJs.px(6))
    ]);

function filling(_width) {
  return CssJs.style([
              CssJs.width(CssJs.pct(_width)),
              CssJs.backgroundColor(CssJs.darkgrey)
            ]);
}

var Styles = {
  container: container,
  filling: filling
};

function Today$ProgressBar(Props) {
  var percent = Props.percent;
  return React.createElement("div", {
              className: container
            }, React.createElement("div", {
                  className: filling(percent)
                }));
}

var ProgressBar = {
  Styles: Styles,
  make: Today$ProgressBar
};

var bookContainer = CssJs.style([
      CssJs.position("relative"),
      CssJs.display("flex"),
      CssJs.flexWrap("wrap"),
      CssJs.flexDirection("column"),
      CssJs.minWidth(CssJs.px(0)),
      CssJs.wordWrap("breakWord"),
      CssJs.backgroundColor(CssJs.hex("fff")),
      CssJs.backgroundClip("borderBox"),
      CssJs.border(CssJs.px(1), "solid", CssJs.rgba(0, 0, 0, {
                NAME: "num",
                VAL: 0.125
              })),
      CssJs.borderRadius(CssJs.px(4)),
      CssJs.width(CssJs.px(288)),
      CssJs.margin(CssJs.px(8))
    ]);

function bgColor(name) {
  var color = StringToColor(name).replace("#", "");
  return CssJs.style([CssJs.background(CssJs.hex(color + "7d"))]);
}

var book = CssJs.style([
      CssJs.position("relative"),
      CssJs.flex3(1, 1, CssJs.auto),
      CssJs.minHeight(CssJs.px(1)),
      CssJs.padding(CssJs.px(20)),
      CssJs.selector("& > h1", [
            CssJs.fontSize(CssJs.px(20)),
            CssJs.fontWeight({
                  NAME: "num",
                  VAL: 500
                }),
            CssJs.lineHeight(CssJs.px(24)),
            CssJs.margin3(CssJs.px(0), "auto", CssJs.px(12))
          ])
    ]);

var progress = CssJs.style([
      CssJs.display("flex"),
      CssJs.selector("& > div:first-child", [CssJs.fontSize(CssJs.px(12))])
    ]);

var overlay = CssJs.style([
      CssJs.background(CssJs.rgba(255, 255, 255, {
                NAME: "num",
                VAL: 0.8
              })),
      CssJs.display("flex"),
      CssJs.justifyContent("center"),
      CssJs.alignItems("center"),
      CssJs.position("absolute"),
      CssJs.top(CssJs.px(0)),
      CssJs.left(CssJs.px(0)),
      CssJs.width(CssJs.pct(100)),
      CssJs.height(CssJs.pct(100))
    ]);

var inputGroup = CssJs.style([
      CssJs.position("relative"),
      CssJs.display("flex"),
      CssJs.flexWrap("wrap"),
      CssJs.alignItems("stretch"),
      CssJs.width(CssJs.pct(100)),
      CssJs.selector("& > input", [
            CssJs.borderTopRightRadius(CssJs.px(0)),
            CssJs.borderBottomRightRadius(CssJs.px(0)),
            CssJs.position("relative"),
            CssJs.flex3(1, 1, CssJs.auto),
            CssJs.width(CssJs.pct(1)),
            CssJs.minWidth("zero"),
            CssJs.marginBottom("zero"),
            CssJs.margin(CssJs.px(0))
          ])
    ]);

var formControl = CssJs.style([
      CssJs.display("block"),
      CssJs.width(CssJs.pct(100)),
      CssJs.height(CssJs.px(24)),
      CssJs.padding2(CssJs.px(6), CssJs.px(12)),
      CssJs.fontSize(CssJs.px(16)),
      CssJs.fontWeight({
            NAME: "num",
            VAL: 400
          }),
      CssJs.lineHeight(CssJs.px(24)),
      CssJs.color(CssJs.hex("495057")),
      CssJs.backgroundColor(CssJs.hex("fff")),
      CssJs.backgroundClip("paddingBox"),
      CssJs.border(CssJs.px(1), "solid", CssJs.hex("ced4da")),
      CssJs.borderRadius(CssJs.px(4)),
      CssJs.transition(undefined, undefined, undefined, "border-color .15s ease-in-out,box-shadow .15s ease-in-out"),
      CssJs.label("formControl")
    ]);

var inputGroupAppend = CssJs.style([
      CssJs.display("flex"),
      CssJs.marginLeft(CssJs.px(-1))
    ]);

var btnOutlinePrimary = CssJs.style([
      CssJs.cursor("pointer"),
      CssJs.display("inlineBlock"),
      CssJs.fontWeight({
            NAME: "num",
            VAL: 400
          }),
      CssJs.color(CssJs.hex("212529")),
      CssJs.textAlign("center"),
      CssJs.verticalAlign("middle"),
      CssJs.userSelect("none"),
      CssJs.backgroundColor("transparent"),
      CssJs.border(CssJs.px(1), "solid", "transparent"),
      CssJs.padding2(CssJs.px(6), CssJs.px(12)),
      CssJs.borderTopRightRadius(CssJs.px(4)),
      CssJs.borderBottomRightRadius(CssJs.px(4)),
      CssJs.fontSize(CssJs.px(16)),
      CssJs.lineHeight(CssJs.px(24)),
      CssJs.transition(undefined, undefined, undefined, "color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out"),
      CssJs.whiteSpace("nowrap"),
      CssJs.textTransform("none"),
      CssJs.margin(CssJs.px(0)),
      CssJs.color(CssJs.hex("fff")),
      CssJs.backgroundColor(CssJs.hex("007bff")),
      CssJs.borderColor(CssJs.hex("007bff")),
      CssJs.position(CssJs.relative),
      CssJs.zIndex(2)
    ]);

var Styles$1 = {
  bookContainer: bookContainer,
  bgColor: bgColor,
  book: book,
  progress: progress,
  overlay: overlay,
  inputGroup: inputGroup,
  formControl: formControl,
  inputGroupAppend: inputGroupAppend,
  btnOutlinePrimary: btnOutlinePrimary
};

function Today$Book(Props) {
  var name = Props.name;
  var currentPage = Props.currentPage;
  var pagesTotal = Props.pagesTotal;
  var match = React.useState(function () {
        
      });
  var setOverlay = match[1];
  var overlay$1 = match[0];
  var progressInPercent = function (currentPage, pagesTotal) {
    return Math.min(currentPage / pagesTotal * 100.0, pagesTotal);
  };
  var tmp;
  if (overlay$1 !== undefined) {
    switch (overlay$1) {
      case /* ReceivingInput */0 :
          tmp = React.createElement("div", {
                className: overlay
              }, React.createElement("div", {
                    className: inputGroup
                  }, React.createElement("input", {
                        className: formControl,
                        id: "progress-input",
                        autoFocus: true,
                        min: "1",
                        placeholder: "Current page ..",
                        type: "number"
                      }), React.createElement("div", {
                        className: inputGroupAppend
                      }, React.createElement("button", {
                            className: btnOutlinePrimary,
                            id: "button-addon2",
                            type: "button"
                          }, "Submit"))));
          break;
      case /* WaitingForResponse */1 :
          tmp = React.createElement("div", {
                className: overlay
              }, "WaitingForResponse");
          break;
      case /* SuccessResponse */2 :
          tmp = React.createElement("div", {
                className: overlay
              }, "SuccessResponse");
          break;
      
    }
  } else {
    tmp = React.createElement(React.Fragment, undefined);
  }
  return React.createElement("div", {
              className: bookContainer,
              onMouseLeave: (function (param) {
                  return Curry._1(setOverlay, (function (param) {
                                
                              }));
                }),
              onMouseOver: (function (param) {
                  return Curry._1(setOverlay, (function (param) {
                                return /* ReceivingInput */0;
                              }));
                })
            }, React.createElement("div", {
                  className: CssJs.merge([
                        book,
                        bgColor(name)
                      ])
                }, React.createElement("h1", undefined, name), React.createElement("div", {
                      className: progress
                    }, React.createElement("div", undefined, currentPage.toString() + " of " + pagesTotal.toString() + " pages read"), React.createElement(Today$ProgressBar, {
                          percent: progressInPercent(currentPage, pagesTotal)
                        })), tmp));
}

var Book = {
  Styles: Styles$1,
  make: Today$Book
};

var _books = [
  {
    name: "Ensel und Krete",
    author: "Walter Moers",
    pagesTotal: 255,
    currentPage: 100,
    dateStarted: "04/02/2018",
    readTime: 0
  },
  {
    name: "Harry Potski",
    author: "Jon Doe",
    pagesTotal: 255,
    currentPage: 200,
    dateStarted: "04/02/2018",
    readTime: 0
  }
];

var container$1 = CssJs.style([CssJs.padding(CssJs.px(24))]);

var label = CssJs.style([
      CssJs.fontSize(CssJs.px(13)),
      CssJs.color(CssJs.hex("6c757d")),
      CssJs.textTransform("uppercase"),
      CssJs.margin(CssJs.px(8))
    ]);

var row = CssJs.style([
      CssJs.display("flex"),
      CssJs.flexWrap("wrap")
    ]);

var Styles$2 = {
  container: container$1,
  label: label,
  row: row
};

function Today(Props) {
  return React.createElement("div", undefined, React.createElement("div", {
                  className: container$1
                }, React.createElement("div", {
                      className: label
                    }, "In Progress"), React.createElement("div", {
                      className: row
                    }, _books.filter(function (param) {
                              return param.currentPage <= param.pagesTotal;
                            }).sort(function (_1, _2) {
                            if (_1.name < _2.name) {
                              return -1;
                            } else {
                              return 1;
                            }
                          }).map(function (param) {
                          var name = param.name;
                          return React.createElement(Today$Book, {
                                      name: name,
                                      currentPage: param.currentPage,
                                      pagesTotal: param.pagesTotal,
                                      key: name
                                    });
                        }))), React.createElement("div", undefined, "Completed"));
}

var make = Today;

exports.str = str;
exports.ProgressBar = ProgressBar;
exports.Book = Book;
exports._books = _books;
exports.Styles = Styles$2;
exports.make = make;
/* container Not a pure module */
